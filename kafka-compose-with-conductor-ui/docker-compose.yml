version: '3.8'

services:

  zookeeper:
    image: confluentinc/cp-zookeeper:6.1.11
    container_name: zookeeper
    hostname: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - "zookeeper_data:/data"
      - "zookeeper_datalog:/datalog"

  kafka:
    image: confluentinc/cp-kafka:6.1.11
    container_name: kafka
    hostname: kafka
    ports:
      - "9092:9092"
      - "9101:9101"
    depends_on:
      - zookeeper
    volumes:
      - "kafka_data:/conduktor/kafka"
      - type: bind
        source: ./jmx-exporter.yml
        target: /etc/jmx-exporter.yml
        read_only: false
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://kafka:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_SUPPORT_METRICS_ENABLE: 'false'
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      JMX_EXPORTER_ENABLE: yes
      JMX_EXPORTER_PORT: 9101
      JMX_EXPORTER_CONFIG: /etc/jmx-exporter.yml

  schema-registry:
    image: confluentinc/cp-schema-registry:6.1.11
    hostname: schema-registry
    container_name: schema-registry
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka:29092'
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    depends_on:
      - zookeeper
      - kafka

  conduktor-platform:
    image: conduktor/conduktor-platform:1.13.1
    hostname: conduktor
    container_name: conduktor
    ports:
      - "8080:8080"
    volumes:
      - conduktor_data:/var/conduktor
      - type: bind
        source: "./${CONF_NAME:-platform-config}.yaml"
        target: /opt/conduktor/platform-config.yaml
        read_only: false
    depends_on:
      - kafka
      - schema-registry
    environment:
      CDK_IN_CONF_FILE: /opt/conduktor/platform-config.yaml
      KAFKA_BOOTSTRAP_SERVER: kafka:29092
      SR_SERVER: "http://schema-registry:8081"
      LICENSE_KEY: "${LICENSE_KEY}"
      ORGANISATION_NAME: "Spd"
      ADMIN_EMAIL: "joleksiysurovtsev@gmail.com"
      ADMIN_PSW: "111111"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl --fail http://localhost:${CDK_LISTENING_PORT:-8080}/platform/api/modules/health/live"
        ]
      interval: 30s
      start_period: 120s # Leave time for the psql init scripts to run
      timeout: 5s
      retries: 3

  kadeckweb:
    image: xeotek/kadeckweb:4.2.9
    hostname: kadec
    container_name: kadec
    ports:
      - "80:80"
    environment:
      xeotek_kadeck_port: 80
      xeotek_kadeck_teamid: docker.bQLUoUua4ro
      xeotek_kadeck_secret: 560cbcf40ea39f8212f51dfe2344054169b1363debe3893c8e7db242f79e62a562c06043cf2cec240651
    depends_on:
      - kafka
      - schema-registry

  kadeckweb_post_install:
    image: appropriate/curl
    depends_on:
      - kadeckweb
    entrypoint: '/bin/sh'
    command:
      - "-c"
      - |
        until nc -vz kadeckweb 80 ; do
          echo waiting for kadeckweb; sleep 5;
        done
        curl -X POST http://kadeckweb:80/api/auth -c cookie --data \
          '{
            "username": "admin",
            "password": "admin"
          }'
        curl -X POST http://kadeckweb:80/api/servers -b cookie --data \
          '{
            "id": -1,
            "name": "local",
            "address": "kafka:29092",
            "schemaregistry": "http://schema-registry:8081",
            "type": "KAFKA",
            "security": {
              "ts_loc": "",
              "ts_pass": "",
              "ks_loc": "",
              "ks_pass": "",
              "ks_ppass": "",
              "protocol": "PLAINTEXT"
            },
            "sasl": null,
            "schemasecurity": null
          }'

volumes:
  zookeeper_data: {}
  zookeeper_datalog: {}
  kafka_data: {}
  conduktor_data: {}
